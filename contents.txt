1. Type Safety by compiler
2. First-class Concurrency Support -  Perfect for Backend
3. pointers, memory and concurrency


//6
Packages and modules
import "name"

// batch import
import (
 . "name" // . = without package name
 pk "namespace/packageName" //pk = packageName alias
)

// Modules
// Collections of Packages
// go.mod file
// Contains - Dependencies , GO Version, Package info
// EX

module example.com/practice

go 1.17

require (
    github.com/alexflint/go-arg v1.4.2
    github.com/fatih/color v1.12.5

)

// 7
// Data types
// Primitive type and type alias
// Go is Statically typed - Data types must be provided by the programmer
// Type inference - determine what type of data it is working with

 // Signed Integer types - includes negative
 //int8
 //int16
 //int
 //int32
 //int64

 //Unsigned Integer Types - Only Positive includes 0
 //unit8
 //byte
 //unit16
 //uint
 //uint32
 //uint64
 //uintptr || <pointer size>  - Depends on 32 or 64 bit systems

 //Other Data types
 //float32
 //float64
 //complex64 - 32-bit real and imaginary
 //complex128
 //bool

 //Type Aliases
 //type UserId int
 //type Direction byte
 //type Speed float64
 //type Velocity Speed //Note here  **** || it is actually float64


 //Type Conversions
 // Using Parenthesis we can convert type
 // type UserId int
 // type Speed float64
 // UserId(5)
 // Speed(88.3)

 //8 -  Strings / Runes
 // rune - like char - letters, numbers, emojis,
 // // String  - "vijay" - Multiple runes

 || Runes: 'a' 'R' '7' '\n' `$`
 || Strings: "Amount is $22\n"
               "k"
 || Raw Literal: `Let's Code in "Golang!"\n`

 //9 - Go CLi
    // Update dependencies
    // Build - builds and exectable binary
    //build-race - checks for concurrency problems
    //run - runs immeditely
    //mod manages modules and dependencies
        //mod tidy updated dependencies
    //test: runs test suite
    //fmt : formats source code
/***********************************************************************/
/***********************************************************************/
//11 Go Pgm Fundamentals
// variables
// single creation
// var example = 3
// var example int = 3
// var example int // default to 0
    //example = 3

// Compound creation
//var a, b, c = 1, 2, "sample"

// Block creation
var (
    a int = 1
    b int = 2
    c = "sample"
)

// Create and Assign - Short cut
example := 3
a, b := 1, "sample"

// Defaults
// String = ""
// Number = 0
// Other default: nil
// var name string

// "Comma, Ok"
// a := 1
    // var a = 5 ==> throws error
//a, b := 1, 2
//c, b := 3, 4 => Ok - No Error
//x, err := //
//y, err := //
z, err := //

//Naming - camelCase

// Constants - never change
// const MaxSpeed = 30
// const AppAuthor = "Bon"

// 14.. Basic Functions
// func name(param1 type, param2 type) type { //body }
// func sum(lhs, rhs int) int { return lhs + rhs } // same type so only one int at end is enough
// result := sum(1,2)


// Multiple return values
// func multiReturn() (int, int, int) {  return 1,2,3 }
// a,b, _ := multiReturn()

// FUnction Naming  - camelCase

// 17 - Operators
// <, -,  >
// ++, --
// < , <=, >, >=, ==, !=
// authorized && authenticated
// red || blue
// !heavy

//18- if..else
if userName != "" {

} else {

}

if hasTicket && ticketValid {

}
if funds >  cost && accountActive {

}
// statement initialization
if i :=5; i < 10 {

} else {

}
/*****************88888/
if rank := getUserRank(); rank === "admin" {

} else if rank === "manager" {

} else {

}

// Early Return -  Function Return
token, err := getSession("vijay")
if err != nil {
    return
}

cart, err := getCart(token)
if err != nil {
    return
}

// 21 switch
// default is optional
x := 3
switch x {
case 1:
    fmt.println("1")
 default:
    fmt.println("other:",x)
}

// Case List
switch X {
case 1,2,3 :
///
case 10,20,30:
}

// Fallthrough - Continue checking the next case
switch letter {
case ' ' :
case 'a', 'e', 'i', 'o', 'u':
    printf("Vowel")
    fallthrough
case 'A', 'E', 'I', 'O', 'U'
printf("")
}

24  - Looping - only one loop in go lang - go
// Basic Looping
for i := 0; i < 10; i++ {   //... }

// While Looping
for i < 10 { /... i++}

// Break
for {  if { break } }

// Continue - Skip the current loop - iteration
for i :=0 ; i < 10; i++ {
    if i % 2 === 0 { continue }
}

// 27
// Standard Library Packages
// Generating Random numbers
// Control Flow
// Looping
//Retrieving System Time

//https://pkg.go.dev/std

/*********************************************************************************************************************************/
    Go Programming: Types

/*********************************************************************************************************************************/
// 29 Structures
// allow data to be stored in groups -  class in other pgm languages
// inside is called field
// type Sample struct {
    field string
    a, b int
 }
 data := Sample{"word", 1, 2}

 data := Sample {
    field: "word",
    a: 1,
    b: 2
 }

default values
data := Sample {} // field = "" a,b = 0
data := Sample{ a: 5 }

// Accessing Fields
word := data.field
a, b := data.a, data.b

data.field = "hello"
data.a = 10
data.b = 20

// Anonymous structures
var sample struct {
    field string
    a, b int
}
sample.field = "hello"
sample.a = 10

// Short hand - must have all fields defined
sample := struct {
    field string
    a, b int
} {
    "hello",
    1, 2,
}

// 32 - Array  Same kind of data stored consecutively - generally fixed size

// creation of an array
var myArray [3]int

myArray := [3]int{7,8,9}

myArray := [...]int{7,8,9} - ... -> takes size from elements

myArray := [4]int{7,8,9} -> 4 == 0 // default

// Accessing the array
myArray[0] = 7

// iteration over
myArray := [...]int{7,8, 9}
for i := 0; i < len(myArray); i++ {
    item := myArray[i]
    fmt.println(item)
}

// 35 - slices - Companion types that work with arrays
// Enable "view" into an array
// create and destroy the slices
// min memory - not copy just - memory address point to original array

// creating a slice

mySlice := []int{1,2,3} // [] => no need to specify size

// accessing
item1 := mySlice[0]

// slice Syntax
slice[a:b] // => a = start index (inclusive) / b = end index(exclusive)

 numbers := [...]int{1, 2, 3, 4}

 slice1 := numbers[:] // [1, 2, 3, 4]

 slice2 := numbers[1:] // [2, 3, 4]
 slice3 := slice2[:1] // [2]

 slice4 := numbers[:2] // [1, 2]
 slice5 := numbers[1:3] // [2, 3]


 // Dynamic Arrays - using append()
 numbers := []int{1, 2, 3}
 numbers = append(numbers, 4,5,6)

 3 dots = extend with another slice
 part1 := []int{1, 2, 3}
 part2 := []int{4,5,6}

 combined := append(part1, part2...)

 // Preallocation - make()
 // useful when number of elements is known, but their values are still unknown

 // slice := make([]int, 10)

 // Slices to Functions - work with slices of any size

 func iterate(slice []int) {
    for i := 0; i < len(slice); i++ {
        // ...
    }
 }
 small := []int{1}
 big := []int{1, 2, 3, 4, 5 ,6,7}
 iterate(small)
 iterate(big)

 // Multi dimensional Slices
 board := [][]string{
    // type declaration is optional
    []string{"_","_","_"},
    {"_","_","_"},
    {"_","_","_"}
 }

 board[0][0] = "X"
 board[0][1] = "0"

 //39 - Maps - key-value pairs
 // stored in random order
 // fast when we know the key
 // no need to specify the size

 // myMap := make(map[string]int)

  myMap := map[string]int {
    "item 1" : 1,
    "item 2" : 2,
    "item 3" : 3,
  }

  // Map operations
  insert : myMap["fav number"] = 5
  Read :  fav := myMap["fav number"]
          missing := myMap["age"] // default value = default value type of map type (int  = 0)
  Delete :  delete(myMap, "fav number")
  check Existence : price, found := myMap["price"]
                     if !found {
                       fmt.println("Price not found")
                       return
                     }

 // map iteration

 myMap := make(map[string]int)
 for key, value := range myMap {
    ...
 }